package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/xaaha/address-api/graph/model"
)

// CountryCode is the resolver for the countryCode field.
func (r *queryResolver) CountryCode(ctx context.Context, country *string) ([]*model.CountryInfo, error) {
	db := r.Resolver.DB

	var query string
	var args []any

	const baseQuery = "SELECT DISTINCT country, country_code FROM address"

	if country != nil {
		query = baseQuery + " WHERE country = ? ORDER BY country"
		processedCountry := strings.TrimSpace(*country)
		args = append(args, processedCountry)
	} else {
		query = baseQuery + " ORDER BY country"
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("database query failed: %w", err)
	}
	defer rows.Close()

	var results []*model.CountryInfo

	for rows.Next() {
		var info model.CountryInfo

		if err := rows.Scan(&info.Country, &info.Code); err != nil {
			return nil, fmt.Errorf("failed to scan row: %w", err)
		}
		results = append(results, &info)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error during row iteration: %w", err)
	}

	// If the user searched for a specific country AND we found no results...
	if country != nil && len(results) == 0 {
		// ...return a helpful error instead of just an empty list.
		errMsg := fmt.Sprintf(
			"No matching country found for '%s'. Omit the argument to get a list of all countries and codes.",
			*country,
		)
		return nil, errors.New(errMsg)
	}

	return results, nil
}

// AddressesByCountryCode is the resolver for the addressesByCountryCode field.
func (r *queryResolver) AddressesByCountryCode(ctx context.Context, countryCode string, count *int32) ([]*model.Address, error) {
	db := r.Resolver.DB

	// country code should be Uppercase.
	processedCode := strings.ToUpper(countryCode)
	const defaultLimit int32 = 5
	const maxLimit int32 = 50

	limit := defaultLimit
	if count != nil {
		limit = min(*count, maxLimit)
		if limit <= 0 {
			limit = defaultLimit
		}
	}

	query := `
        SELECT id, name, full_address, phone, country_code, country
        FROM address
        WHERE country_code = ?
        ORDER BY RANDOM()
        LIMIT ?`

	rows, err := db.QueryContext(ctx, query, processedCode, limit)
	if err != nil {
		return nil, fmt.Errorf("error on db query:  %v", err)
	}
	defer rows.Close()

	var results []*model.Address
	for rows.Next() {
		var addr model.Address

		err := rows.Scan(
			&addr.ID,
			&addr.Name,
			&addr.FullAddress,
			&addr.Phone,
			&addr.CountryCode,
			&addr.Country,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan row: %w", err)
		}

		results = append(results, &addr)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error during row iteration: %w", err)
	}
	return results, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
